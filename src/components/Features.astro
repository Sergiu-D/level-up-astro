---
interface FeatureItem {
  title: string;
  description: string;
}

interface FeaturesProps {
  title: string;
  description: string;
  items: FeatureItem[];
}

interface Props {
  data: FeaturesProps;
}

const { data } = Astro.props;

const featureIcons = [
  "M16 4v12l-4-2-4 2V4M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z",
  "M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z",
  "M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"
];

const featureColors = [
  {
    bgGradient: "from-purple-500 to-indigo-500",
    iconBg: "bg-purple-100",
    iconColor: "text-purple-600"
  },
  {
    bgGradient: "from-blue-500 to-cyan-500",
    iconBg: "bg-blue-100",
    iconColor: "text-blue-600"
  },
  {
    bgGradient: "from-emerald-500 to-teal-500",
    iconBg: "bg-emerald-100",
    iconColor: "text-emerald-600"
  }
];
---

<section class="py-16 bg-gradient-to-b from-indigo-900 via-blue-800 to-indigo-900 relative overflow-hidden text-white">
  <!-- Decorative elements -->
  <div class="absolute top-0 right-0 -translate-y-1/4 translate-x-1/4">
    <div class="w-64 h-64 bg-purple-500 rounded-full blur-3xl opacity-30"></div>
  </div>
  <div class="absolute bottom-0 left-0 translate-y-1/4 -translate-x-1/4">
    <div class="w-64 h-64 bg-blue-500 rounded-full blur-3xl opacity-30"></div>
  </div>
  
  <!-- Wavy decoration with dots -->
  <div class="absolute inset-0 z-0 opacity-15">
    <svg xmlns="http://www.w3.org/2000/svg" width="100%" height="100%">
      <pattern id="pattern-circles" x="0" y="0" width="30" height="30" patternUnits="userSpaceOnUse" patternContentUnits="userSpaceOnUse">
        <circle id="pattern-circle" cx="10" cy="10" r="1.5" fill="#fff"></circle>
      </pattern>
      <rect id="rect" x="0" y="0" width="100%" height="100%" fill="url(#pattern-circles)"></rect>
    </svg>
  </div>
  
  <div class="container mx-auto px-4 relative z-10">
    <div class="max-w-3xl mx-auto">
      <div class="text-center mb-16">
        <h2 class="text-3xl md:text-4xl font-bold mb-6 font-heading text-white">
          {data.title}
        </h2>
        <p class="text-xl text-blue-100">
          {data.description}
        </p>
      </div>
      
      <!-- Timeline Layout -->
      <div class="relative">
        <!-- Central line -->
        <div class="absolute left-1/2 top-0 bottom-0 w-1 bg-gradient-to-b from-cyan-400 to-blue-400 transform -translate-x-1/2 glow"></div>
        
        {data.items.map((feature, index) => (
          <div class={`flex flex-col md:flex-row gap-8 mb-16 ${index % 2 === 0 ? 'md:flex-row-reverse' : ''}`}>
            <!-- Feature content -->
            <div class="md:w-1/2 relative">
              <!-- The dot on the timeline -->
              <div class="hidden md:block absolute top-6 w-8 h-8 bg-indigo-800 rounded-full border-4 border-blue-400 shadow-lg z-10 left-0 md:left-auto md:right-0 transform translate-x-1/2 md:translate-x-1/2"></div>
              
              <div class={`p-6 rounded-xl shadow-lg border border-blue-300 hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1 ${index % 2 === 0 ? 'bg-gradient-to-tr from-white to-blue-50' : 'bg-gradient-to-bl from-white to-indigo-50'} backdrop-blur-sm`}>
                <div class="flex items-start">
                  <div class={`flex-shrink-0 mr-4 p-3 rounded-lg ${index % 2 === 0 ? 'bg-blue-600' : 'bg-indigo-600'}`}>
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="1.5">
                      <path stroke-linecap="round" stroke-linejoin="round" d={featureIcons[index % featureIcons.length]} />
                    </svg>
                  </div>
                  <div>
                    <h3 class="text-2xl font-heading font-bold mb-3 text-gray-800">{feature.title}</h3>
                    <p class="text-gray-600">{feature.description}</p>
                  </div>
                </div>
              </div>
            </div>
            
            <!-- Illustration or image for each feature -->
            <div class="md:w-1/2 relative">
              <div class={`h-full flex items-center justify-center ${index % 2 === 0 ? 'md:justify-start' : 'md:justify-end'}`}>
                <div class={`p-3 rounded-xl bg-indigo-700/30 backdrop-blur-sm shadow-md border border-blue-500/30 md:transform ${index % 2 === 0 ? 'md:-translate-x-6 md:rotate-3' : 'md:translate-x-6 md:-rotate-3'}`}>
                  <div class={`w-full h-48 rounded-lg overflow-hidden flex items-center justify-center bg-gradient-to-r ${index % 2 === 0 ? 'from-blue-600/40 to-blue-800/40' : 'from-indigo-600/40 to-indigo-800/40'}`}>
                    <!-- Placeholder illustrations -->
                    {index === 0 && (
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-24 w-24 text-blue-200 opacity-80" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
                      </svg>
                    )}
                    {index === 1 && (
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-24 w-24 text-indigo-200 opacity-80" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253" />
                      </svg>
                    )}
                    {index === 2 && (
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-24 w-24 text-blue-200 opacity-80" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
                      </svg>
                    )}
                  </div>
                </div>
              </div>
            </div>
        </div>
      ))}
      </div>
      
      <!-- Bottom CTA -->
      <div class="text-center mt-12">
        <a href="/about" class="inline-flex items-center px-5 py-3 rounded-full bg-gradient-to-r from-blue-500 to-indigo-500 text-white hover:from-blue-600 hover:to-indigo-600 transition-all duration-300 shadow-lg hover:shadow-blue-500/30 font-medium">
          Află mai multe despre metodologia noastră
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-2" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M10.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L12.586 11H5a1 1 0 110-2h7.586l-2.293-2.293a1 1 0 010-1.414z" clip-rule="evenodd" />
          </svg>
        </a>
      </div>
    </div>
  </div>
</section>

<style>
  .glow {
    box-shadow: 0 0 15px rgba(56, 189, 248, 0.6);
  }
</style>