---
interface AgeGroupItem {
  title: string;
  description: string;
  icon: string;
}

interface AgeGroupsProps {
  title: string;
  items: AgeGroupItem[];
}

interface Props {
  data: AgeGroupsProps;
}

const { data } = Astro.props;

// Icon path mapping
const getIconPath = (icon: string) => {
  switch(icon) {
    case 'kids':
      return 'M12 11.5a2.5 2.5 0 100-5 2.5 2.5 0 000 5zm0 2a3.5 3.5 0 103.5-3.5h-3.5V14z M14.5 4a2.5 2.5 0 10-5 0 2.5 2.5 0 005 0zm-7 14a4 4 0 018 0v.5h-8V18z';
    case 'teens':
      return 'M10 9a2 2 0 114 0 2 2 0 01-4 0zm-2 8a4 4 0 118 0v1h-8v-1z M17.5 13c-1.391 0-2.518 1.125-2.518 2.5 0 .24.035.475.101.702L13 18.064v2.186L16.5 19l.5 1 .5-1 3.5 1.25v-2.186l-2.08-1.86a3.55 3.55 0 00.098-.704c0-1.372-1.124-2.5-2.518-2.5z';
    case 'adults':
      return 'M9 7h2v2H9zm4 0h2v2h-2zm-6 4h2v2H7zm4 0h2v2h-2zm4 0h2v2h-2zm-8 4h2v2H7zm4 0h2v2h-2zm4 0h2v2h-2z';
    default:
      return 'M12 4a4 4 0 100 8 4 4 0 000-8zM6 12a6 6 0 1112 0v.5H6V12z';
  }
};

// Get background colors and icon colors for age groups
const getAgeGroupColors = (icon: string) => {
  switch(icon) {
    case 'kids':
      return {
        gradient: 'from-pink-500 to-rose-400',
        iconBg: 'bg-pink-100',
        iconColor: 'text-pink-600',
        border: 'border-pink-200'
      };
    case 'teens':
      return {
        gradient: 'from-blue-500 to-indigo-400',
        iconBg: 'bg-blue-100',
        iconColor: 'text-blue-600',
        border: 'border-blue-200'
      };
    case 'adults':
      return {
        gradient: 'from-purple-500 to-indigo-500',
        iconBg: 'bg-purple-100',
        iconColor: 'text-purple-600',
        border: 'border-purple-200'
      };
    default:
      return {
        gradient: 'from-blue-500 to-indigo-500',
        iconBg: 'bg-blue-100',
        iconColor: 'text-blue-600',
        border: 'border-blue-200'
      };
  }
};
---

<section class="py-16 bg-gradient-to-b from-blue-50 to-white">
  <div class="container mx-auto px-4">
    <h2 class="text-3xl md:text-4xl font-bold mb-12 text-center font-heading text-primary-800 animate-fade-in">
      {data.title}
    </h2>
    
    <div class="grid grid-cols-1 md:grid-cols-3 gap-8">
      {data.items.map((item, index) => {
        const colors = getAgeGroupColors(item.icon);
        return (
          <div class={`bg-white rounded-xl overflow-hidden shadow-xl hover:shadow-2xl transition-all duration-300 transform hover:-translate-y-1 ${colors.border} border`}>
            <div class={`h-8 bg-gradient-to-r ${colors.gradient}`}></div>
            <div class="p-8">
              <div class={`mx-auto w-20 h-20 mb-6 flex items-center justify-center ${colors.iconBg} rounded-full -mt-12 border-4 border-white shadow-md`}>
                <svg xmlns="http://www.w3.org/2000/svg" class={`h-10 w-10 ${colors.iconColor}`} viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <path d={getIconPath(item.icon)}></path>
                </svg>
              </div>
              <h3 class="text-2xl font-heading font-semibold mb-4 text-center text-gray-800">{item.title}</h3>
              <p class="text-gray-600 text-center">{item.description}</p>
            </div>
          </div>
        );
      })}
    </div>
  </div>
</section> 