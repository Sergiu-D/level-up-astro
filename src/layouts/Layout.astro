---
import "../styles/global.css";
import variablesData from "../data/variables.json";
import homeData from "../data/home.json";
import layoutData from "../data/layout.json";
import { replaceVariables, loadDataWithVariables } from "../utils/variables.js";
import Footer from "../components/Footer.astro";

interface Props {
  title: string;
}

const { title } = Astro.props;
const siteName = replaceVariables("{{common.siteName}}");
const copyright = replaceVariables("{{common.copyright}}").replace(
  "{year}",
  new Date().getFullYear().toString()
);
const processedVariables = loadDataWithVariables(variablesData);
const processedLayout = loadDataWithVariables(layoutData) as any;

// Add Google Fonts
const fontImportUrl =
  "https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Montserrat:wght@400;500;600;700&display=swap";
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <link rel="stylesheet" href={fontImportUrl} />
    <title>{title} | {siteName}</title>
  </head>
  <body class="min-h-screen flex flex-col font-sans text-gray-800 bg-gray-50">
    <header id="main-header" class="fixed top-0 w-full z-50 transition-all duration-300">
      <div
        id="header-container"
        class="container mx-auto flex flex-col md:flex-row justify-between items-center py-4 px-6 transition-all duration-300"
      >
        <div class="w-full md:w-auto flex justify-between items-center">
          <a href="/" class="text-2xl font-heading font-bold animate-fade-in text-primary-800 flex items-center group">
            <span class="bg-gradient-to-r from-blue-600 to-indigo-700 text-white p-2 rounded-lg mr-2 shadow-md group-hover:shadow-lg transition-all duration-300 transform group-hover:scale-105">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253" />
              </svg>
            </span>
            <span class="transition-colors duration-300 group-hover:text-primary-600">{siteName}</span>
          </a>
          
          <!-- Hamburger menu button - only visible on mobile -->
          <button id="menu-toggle" class="md:hidden flex items-center p-2 rounded-lg hover:bg-gray-100 focus:outline-none transition-all duration-300">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-700" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
            </svg>
          </button>
        </div>
        
        <!-- Navigation - hidden on mobile until toggled -->
        <nav id="mobile-nav" class="hidden md:block w-full md:w-auto transition-all duration-300 overflow-hidden">
          <ul class="flex flex-col md:flex-row md:items-center md:space-x-1 font-medium mt-4 md:mt-0">
            {
              processedLayout?.navigation?.items?.map(
                (item: any, index: number) => {
                  const isLast = index === processedLayout?.navigation?.items?.length - 1;
                  return (
                    <li class="w-full md:w-auto my-1 md:my-0">
                      <a
                        href={item.url}
                        class={`transition-all duration-300 ease-in-out px-4 py-2.5 rounded-lg w-full block text-center md:inline-block ${isLast 
                          ? "bg-gradient-to-r from-blue-600 to-indigo-700 text-white hover:shadow-lg hover:translate-y-[-2px] shadow-md" 
                          : "text-primary-800 hover:text-primary-600 hover:bg-white/90 backdrop-blur-sm hover:shadow-md"}`}
                      >
                        {item.text}
                      </a>
                    </li>
                  );
                }
              )
            }
          </ul>
        </nav>
      </div>
    </header>

    <main class="flex-grow animate-fade-in pt-24">
      <slot />
    </main>

    <Footer siteName={siteName} copyright={copyright} footerData={layoutData.footer} />
    
    <style>
      @keyframes slideIn {
        from {
          opacity: 0;
          transform: translateY(-10px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }
      
      .animate-slide-in {
        animation: slideIn 0.3s ease forwards;
      }
      
      @media (max-width: 768px) {
        #mobile-nav {
          background-color: rgba(255, 255, 255, 0.95);
          backdrop-filter: blur(8px);
          border-radius: 0.5rem;
          box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
          padding: 1rem;
          margin-top: 0.5rem;
        }
        
        #mobile-nav ul {
          border-top: 1px solid rgba(209, 213, 219, 0.5);
          padding-top: 0.5rem;
        }
        
        #mobile-nav li:not(:last-child) {
          border-bottom: 1px solid rgba(209, 213, 219, 0.3);
        }
        
        #mobile-nav a {
          padding: 0.75rem 1rem;
          margin-bottom: 0.25rem;
        }
      }
    </style>
    
    <script>
      // Header scroll effect
      const header = document.getElementById('main-header');
      const headerContainer = document.getElementById('header-container');
      const menuToggle = document.getElementById('menu-toggle');
      const mobileNav = document.getElementById('mobile-nav');
      
      function updateHeaderOnScroll() {
        if (!header || !headerContainer) return;
        
        if (window.scrollY > 50) {
          // Scrolled state
          header.classList.add('bg-white/85', 'backdrop-blur-md', 'shadow-md');
          header.classList.remove('bg-transparent');
          headerContainer.classList.remove('py-6');
          headerContainer.classList.add('py-3');
        } else {
          // Top state
          header.classList.remove('bg-white/85', 'backdrop-blur-md', 'shadow-md');
          header.classList.add('bg-transparent');
          headerContainer.classList.add('py-6');
          headerContainer.classList.remove('py-3');
        }
      }
      
      // Toggle mobile menu
      if (menuToggle && mobileNav) {
        menuToggle.addEventListener('click', () => {
          // Toggle menu visibility
          if (mobileNav.classList.contains('hidden')) {
            mobileNav.classList.remove('hidden');
            mobileNav.classList.add('animate-slide-in');
            
            // Change hamburger to X
            menuToggle.innerHTML = `
              <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-700" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
              </svg>
            `;
          } else {
            mobileNav.classList.add('hidden');
            mobileNav.classList.remove('animate-slide-in');
            
            // Change X back to hamburger
            menuToggle.innerHTML = `
              <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-700" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
              </svg>
            `;
          }
        });
        
        // Close menu when clicking on navigation items
        const navLinks = mobileNav.querySelectorAll('a');
        navLinks.forEach(link => {
          link.addEventListener('click', () => {
            if (window.innerWidth < 768) { // Only on mobile
              mobileNav.classList.add('hidden');
              menuToggle.innerHTML = `
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-700" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
                </svg>
              `;
            }
          });
        });
      }
      
      // Initial state
      updateHeaderOnScroll();
      
      // Add scroll event listener
      window.addEventListener('scroll', updateHeaderOnScroll);
      
      // Handle window resize (to handle mobile to desktop transitions)
      window.addEventListener('resize', () => {
        if (mobileNav && window.innerWidth >= 768) {
          mobileNav.classList.remove('hidden');
        } else if (mobileNav && window.innerWidth < 768) {
          mobileNav.classList.add('hidden');
          if (menuToggle) {
            menuToggle.innerHTML = `
              <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-700" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
              </svg>
            `;
          }
        }
      });
    </script>
  </body>
</html>
